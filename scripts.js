var vars = ['a','b'] ,expressions = ['! ( a || b || c )'];
var getResult = document.getElementById('getResult')
var getXLS = document.getElementById('exportXLS')
var wb = XLSX.utils.book_new();
wb.Props = {
	Title: "Truth Table",
	Subject: "TT",
	Author: "AutoGeneratedTT",
	CreatedDate: new Date(2020,20,20)
};

getResult.addEventListener('click', doubleTap);
getXLS.addEventListener('click', exportXLS);

function s2ab(s) 
{ 
	var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
	var view = new Uint8Array(buf);  //create uint8array as viewer
	for (var i=0; i<s.length; i++)
	{
		view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
	}
	return buf;    
}

function exportXLS()
{
	var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});
	saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), 'TruthTable.xlsx');
}

function doubleTap()
{
	output();
	wb.SheetNames.pop();
	output();
	wb.SheetNames.pop();
	output();
}
function output()
{
	var len = vars.length;
	var splitBy = Math.round(len/2);
	var trueSet;
	var trueVals = [];
	var falseVals = [];
	var truthData = [];
	
	vars = document.getElementById('vars').value.split(',');
	expressions = document.getElementById('expression').value.split(',');

	for(var i = 0; i < expressions.length; i++)
	{
		var NAND = expressions[i].split('(&)');
		var NOR = expressions[i].split('(|)');
		var XOR = expressions[i].split('(+)');
	}

	
	truthData.push(truth(vars, vars, true));
	for(var i = 1; i <= splitBy; i++) 
	{
		trueSet = reduceToCombinations(permut(vars, i));
		trueSet.forEach((truthSrc)=>
		{
			trueVals = truth(vars, truthSrc);
			truthData.push(trueVals);
		});
	}
	truthData.push(truth(vars, vars));
	
	writeTruthTable(truthData);
}

function truth(set, truths, reverse) 
{
	var truthSet = {};
	
	set.forEach(i => truthSet[i] = (truths.indexOf(i) >= 0 ? true : false) ^ reverse);
	
	return truthSet;
}

function reduceToCombinations(arr) 
{
	var i = 1;
	var finalElement;

	arr = arr.map(j => {return j.split('').sort().join('')}).sort();
	
	finalElement = arr[0];
	while(i<arr.length) 
	{
		if(arr[i] == finalElement) 
		{
			arr.splice(i,1);
		} 
		else 
		{
			finalElement = arr[i];
			i++;
		}
	}
	arr = arr.map(j=>{return j.split('')});
	return arr;
}

function writeTruthTable(truthData) 
{
	var table = '<table cellpadding=0 cellspacing=0>';
	var keys;
	var vals;
	var exprRes;
	
	wb.SheetNames.push("TruthTable");
	var ttArr = [...Array(vars.length + expressions.length)].map(x=>Array(Math.pow(2, vars.length) + 1).fill(0))       
	var k = 0;
	table += '<thead><tr>';
	vars.forEach(j =>
	{
		table += '<th>';
		table += j;
		ttArr[k][0] = j;
		table += '</th>';
		k += 1;
	});

	expressions.forEach(j =>
	{
		table += '<th>';
		table += j;
		ttArr[k][0] = j;
		table += '</th>';
		k += 1;
	});

	table += '</tr></thead>';

	try
	{
		k = 0;
		l = 1;
		truthData.forEach((j)=> 
		{
			vals = [];
			keys = [];
			table += '<tr>';
			k = 0;
			for(i in j)
			{
				vals.push(j[i]);
				keys.push(i);
				table += '<td>';
				table += j[i];
				ttArr[k][l] = String(j[i]);
				table += '</td>';
				k += 1;
			};


			for(var i = 0; i < keys.length; i++) 
			{
				eval(`var ${keys[i]} = ${vals[i]};`);
			}

			expressions.forEach((expr)=>
			{
				exprRes = eval(expr);
				table += `<td class="${exprRes}">`;
				table += exprRes ? 'T' : 'F';
				ttArr[k][l] = exprRes ? 'T' : 'F';
				table += '</td>';
			});
			l += 1;
			table += '</tr>';
		});
	
		table += '</table>';
		// Transposing array
		ttArr = ttArr[0].map((_, colIndex) => ttArr.map(row => row[colIndex]));
		wb.Sheets["TruthTable"] = XLSX.utils.aoa_to_sheet(ttArr);
		document.getElementById('result').innerHTML = table;
	}
	catch(err)
	{
		//alert(err);
	}
}

function permut(arr, c) {
	var buf = [];
	var len;
	var arrSlice;
	var permArr;
	var proArr;

	if(c <= 1) 
	{
		return arr;
	} 
	else 
	{
		len = arr.length;
		for(var i = 0; i < len; i++) 
		{
			arrSlice = arr.slice(0,i).concat(arr.slice(i+1));
			permArr = permut(arrSlice,c-1);
			proArr = [];
			for(var y = 0; y < permArr.length; y++) 
			{
				proArr.push([arr[i]].concat(permArr[y]).join(''));
			}
			buf.push(...proArr);
		}
	}
	return buf;
}